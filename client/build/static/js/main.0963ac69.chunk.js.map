{"version":3,"sources":["components/weather-forecast.tsx","components/sensor-data.tsx","components/controls.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["WeatherForecast","SensorData","Grid","container","spacing","item","xs","Card","CardContent","Typography","Controls","darkTheme","createTheme","palette","mode","App","ThemeProvider","theme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAAaA,EAAkB,WAC7B,OACE,gCACE,8BACE,oDAEF,8BACE,4C,gCCLKC,EAAa,WACxB,OACE,gCACE,8BACE,+CAEF,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,6BAIN,cAACP,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,6BAIN,cAACP,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,6BAIN,cAACP,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,oCCjCDC,EAAW,WACpB,OACE,gCACE,8BACE,4CAEF,8BACE,4C,wBCAJC,EAAYC,YAAY,CAC5BC,QAAS,CACPC,KAAM,UAIGC,EAAM,WACjB,OACE,cAACC,EAAA,EAAD,CAAeC,MAAON,EAAtB,SACE,gCAGE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,UCTOO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0963ac69.chunk.js","sourcesContent":["export const WeatherForecast = () => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h2>Weather Forecast</h2>\r\n      </div>\r\n      <div>\r\n        <p>datas</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import {Grid, Card, CardContent, Typography} from \"@mui/material\";\r\n\r\nexport const SensorData = () => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h2>Sensor Data</h2>\r\n      </div>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={6}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography>Sensor 1</Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography>Sensor 2</Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography>Sensor 3</Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography>Sensor 4</Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n","export const Controls = () => {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h2>Controls</h2>\r\n        </div>\r\n        <div>\r\n          <p>stuff</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  ","import {WeatherForecast} from \"./components/weather-forecast\";\r\nimport {SensorData} from \"./components/sensor-data\";\r\nimport {Controls} from \"./components/controls\";\r\nimport \"./App.css\";\r\nimport {createTheme} from \"@mui/material/styles\";\r\nimport {ThemeProvider} from \"@mui/material\";\r\n\r\nconst darkTheme = createTheme({\r\n  palette: {\r\n    mode: 'dark',\r\n  },\r\n});\r\n\r\nexport const App = () => {\r\n  return (\r\n    <ThemeProvider theme={darkTheme}>\r\n      <div>\r\n        {/* <header>\r\n        </header> */}\r\n        <WeatherForecast />\r\n        <SensorData />\r\n        <Controls />\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport {App} from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}